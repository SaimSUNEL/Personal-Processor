
interrupt {

call interfunc


}

jmp deneme
devamet:
mov $1 , 123
mov $2 , 155
add $1 , $2
mov [2 ] , $result
mov $1 , 255
out $1 , 1
tekrar:
mov $1 , 1
out $1 , 0
mov $1 , 0 
out $1 , 0
jmp tekrar
deneme:
mov [ 1 ] , 111
mov [ 0 ] , 12
jmp devamet
interfunc:
mov $3,$5
jmp interfunc





mov $2 , 22
swi $2 , 1
jmp 7


movi $2 , 1
movi $3 , 123
sw $3 , $2
lw $5 , $2
mov $6 , $5
lui $6 , 23
addi $6 , 12
mov [ 2 ] , $result
lwi $1 , 2

mov $1 , 25
mov $3 , 36
add $1 , $3
mov [ 2 ] , $result
mov $1 , 36 
mov $2 , 12
mul $1 , $2
mov [ 5 ] , $result

jmp yazdir




yazdir : 
mov $2 , 12
mov [ 1 ] , $2






movi $2 , 0
bsf  $2   , 1
out $result , 1
out $result , 0
movi $3 , 10
movi $4 , 11
beq $3 , $4
jmp esitdegil
jmp esit

esitdegil:

mov $4  , $0
bsf $4 , 0
out $result , 0
out $result , 1


jmp bitir
esit:
mov $3 , $0
bsf $3 , 1
out $result , 1
out $result , 0



bitir:





mov $1 , 13
mov $2 , 15
call fonksiyon
nop
nop
loop:
jmp loop
nop
nop
fonksiyon:
mov $3 , 31 

add $3 , $1

mov_fast $4 , $result
mov [ 9 ] , $4
return


